%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%  An attempt to determine the most  %
%      likely door that is open      %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

door_states = {open, closed}.
boolean = {true, false}.

max_door : doors.

state : doors -> door_states.
in_path : rooms, rooms -> boolean.
hasdoor : rooms, doors -> boolean.
dooracc : rooms, doors, rooms -> boolean.
acc : rooms, rooms -> boolean.


#domain doors(D).
#domain rooms(R1).
#domain rooms(R2).
#domain rooms(R3).


hasdoor(R1, D) = false :- not hasdoor(R1, D).

%max_door = D :- hasdoor(R1, D) = true, hasdoor(R2, D) = true, state(D) = open, in_path(R1, R2).
max_door = D :- dooracc(R1, D, R3), state(D) = open, in_path(R1, R2), acc(R2, R3).

dooracc(R1,D,R2) :- hasdoor(R1,D), hasdoor(R2,D), R1 <> R2. % <> is like !=
dooracc(R1,D,R2) :- dooracc(R2,D,R1).


acc(R1,R2) :- R1 == R2.
acc(R1,R2) :- acc(R2,R1).
acc(R1,R2) :- acc(R1,R3), acc(R2,R3).

in_path(R1, R2) :- in_path(R2, R1).

[p] random(max_door).

[r(D, R1, R2, R3)] random(state(D)) :- in_path(R1, R2), dooracc(R1, D, R3), acc(R2, R3).

? <max_door>.
